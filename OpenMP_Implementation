#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

// Function to perform 2D convolution using OpenMP
void conv2D(float *input, float *kernel, float *output, int width, int height, int kSize) {
    int radius = kSize / 2;

    #pragma omp parallel for collapse(2)
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            float sum = 0.0;
            for (int ki = -radius; ki <= radius; ki++) {
                for (int kj = -radius; kj <= radius; kj++) {
                    int x = i + ki;
                    int y = j + kj;
                    if (x >= 0 && x < height && y >= 0 && y < width) {
                        sum += input[x * width + y] * kernel[(ki + radius) * kSize + (kj + radius)];
                    }
                }
            }
            output[i * width + j] = sum;
        }
    }
}

int main() {
    const int width = 1024;
    const int height = 1024;
    const int kSize = 3;

    // Allocate memory for input, kernel, and output
    float *input = (float *)malloc(width * height * sizeof(float));
    float *kernel = (float *)malloc(kSize * kSize * sizeof(float));
    float *output = (float *)malloc(width * height * sizeof(float));

    // Initialize input and kernel
    for (int i = 0; i < width * height; i++) {
        input[i] = 1.0f; // Example initialization
    }
    for (int i = 0; i < kSize * kSize; i++) {
        kernel[i] = 1.0f / (kSize * kSize); // Example: Averaging filter
    }

    // Perform 2D convolution using OpenMP
    double start_time = omp_get_wtime();
    conv2D(input, kernel, output, width, height, kSize);
    double end_time = omp_get_wtime();

    printf("2D Convolution Completed using OpenMP\n");
    printf("Time taken: %f seconds\n", end_time - start_time);

    // Free allocated memory
    free(input);
    free(kernel);
    free(output);

    return 0;
}
