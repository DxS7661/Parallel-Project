#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

// Function to perform 2D convolution
void conv2D(float *input, float *kernel, float *output, int width, int height, int kSize, int startRow, int endRow) {
    int radius = kSize / 2;
    for (int i = startRow; i < endRow; i++) {
        for (int j = 0; j < width; j++) {
            float sum = 0.0;
            for (int ki = -radius; ki <= radius; ki++) {
                for (int kj = -radius; kj <= radius; kj++) {
                    int x = i + ki;
                    int y = j + kj;
                    if (x >= 0 && x < height && y >= 0 && y < width) {
                        sum += input[x * width + y] * kernel[(ki + radius) * kSize + (kj + radius)];
                    }
                }
            }
            output[i * width + j] = sum;
        }
    }
}

int main(int argc, char *argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int width = 1024;
    const int height = 1024;
    const int kSize = 3;

    float *input = NULL;
    float *kernel = (float *)malloc(kSize * kSize * sizeof(float));
    float *output = NULL;

    // Initialize kernel (e.g., averaging filter)
    for (int i = 0; i < kSize * kSize; i++) {
        kernel[i] = 1.0f / (kSize * kSize);
    }

    int rowsPerProcess = height / size;
    int extraRows = height % size;

    int startRow = rank * rowsPerProcess;
    int endRow = startRow + rowsPerProcess;
    if (rank == size - 1) {
        endRow += extraRows;
    }

    int localRows = endRow - startRow;

    float *localInput = (float *)malloc(localRows * width * sizeof(float));
    float *localOutput = (float *)malloc(localRows * width * sizeof(float));

    if (rank == 0) {
        input = (float *)malloc(height * width * sizeof(float));
        output = (float *)malloc(height * width * sizeof(float));

        // Initialize input with dummy data
        for (int i = 0; i < height * width; i++) {
            input[i] = 1.0f;
        }
    }

    // Scatter input data to all processes
    MPI_Scatter(input, localRows * width, MPI_FLOAT, localInput, localRows * width, MPI_FLOAT, 0, MPI_COMM_WORLD);

    // Perform local convolution
    conv2D(localInput, kernel, localOutput, width, height, kSize, 0, localRows);

    // Gather results from all processes
    MPI_Gather(localOutput, localRows * width, MPI_FLOAT, output, localRows * width, MPI_FLOAT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("2D Convolution Completed using MPI\n");
        free(input);
        free(output);
    }

    free(kernel);
    free(localInput);
    free(localOutput);

    MPI_Finalize();
    return 0;
}
